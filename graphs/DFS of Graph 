class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> ans = new ArrayList();
        dfs(adj,ans,0,new boolean[adj.size()]);
        return ans;
        
    }
    
    private void dfs(ArrayList<ArrayList<Integer>> adj,ArrayList<Integer> ans,int vertex,boolean[] isVisited){
        isVisited[vertex] = true;
        ans.add(vertex);
        for(int neighbor : adj.get(vertex)){
            if(isVisited[neighbor] == false){
                dfs(adj,ans,neighbor,isVisited);
            }
        }
    }
}

//time complexity : O(V+E)
//space complexity :O(V)